# -*- coding: utf-8 -*-
"""Proyek Kedua_Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V5vVnFuvr8BAkxZ0w4ovBnxHyM4lcX4U

# Belajar Pengembangan Machine Learning - Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series

## Data Diri

Nama : Adi Bintang Pradana <br>
Alamat : Jl. Budi Mulia No. 1, Jakarta <br>
No. HP : 087784537428 <br>
Email : adibintangprada@gmail.com

## Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, LSTM, Flatten, GlobalAveragePooling2D, Conv2D, MaxPooling2D
from tensorflow.python.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.python.keras import optimizer_v2

"""## Load Dataset"""

df = pd.read_csv('BBCA.JK.csv')
df.head()

"""## Data Cleaning and Preprocessing

### Handling Missing Value
"""

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

"""### Handling Inconsistent Data Type"""

df['Date'] = pd.to_datetime(df['Date'])

df.info()

"""### Visualizing Target Data (BBCA Close Price)"""

dates = df['Date'].values
close  = df['Close'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, close)
plt.title('Close Price',
          fontsize=20);

"""### Generating Training Data (80% Training Data)"""

training_data_len = int(np.ceil( len(close) * .8 ))

training_data_len

"""### Feature Scalling"""

close = close.reshape(-1, 1)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
scaled_close = scaler.fit_transform(close)

scaled_close

"""### Split the Data Into x_train and y_train"""

train_data = scaled_close[0:int(training_data_len), :]
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])
    if i<= 61:
        print(x_train)
        print(y_train)
        print()
        
x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

"""## Creating Model Architecture"""

model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

"""## Model Compiling"""

adam = tf.keras.optimizers.Adam(learning_rate = 0.001)

model.compile(optimizer = adam,
              loss='mean_squared_error', 
              metrics=['mae'])

model.summary()

"""## Defining Callback, Best Model Checkpoint, and Early Stopping (If Needed)"""

filepath= "BBCA_timeseries.h5"
checkpoint = ModelCheckpoint(filepath, 
                             monitor='mae', 
                             verbose=1, 
                             save_best_only=True, 
                             mode='max', 
                             save_weights_only=False)

early_stopping = EarlyStopping(monitor='mae',
                               min_delta = 0, 
                               patience = 5, 
                               verbose = 1, 
                               restore_best_weights=True)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<0.1):
      print("\nMAE telah mencapai <10%")
      self.model.stop_training = True
callbacks = myCallback()

callback_params = [checkpoint,
                   early_stopping,
                   callbacks]

"""## Run the Model"""

hist = model.fit(x_train, y_train, 
                 batch_size=1, 
                 epochs=100,
                 callbacks=callback_params)

best_model = tf.keras.models.load_model("BBCA_timeseries.h5")

"""## Loss and MAE Visualization"""

plt.plot(hist.history['mae'])
plt.title('MAE Model')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['MAE'], loc='lower right')
plt.show()

plt.plot(hist.history['loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Loss'], loc='upper right')
plt.show()

"""There is no mae and loss visualization because the model already reached MAE<10% in 1 epoch"""

